pipeline {
    agent {
        label 'AGENT-1'
    }
    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')

    }
    
    parameters {
        string(name: 'appVersion', defaultValue: '1.0.0', description: 'What is the application version')
    }
    environment {
        def appVersion = '' // varaiable declaration
        nexusUrl = 'nexus.swamy.fun:8081'
    }
    stages {
        stage('print the version'){
            steps{
                script{
                    echo "Application version is: ${params.appVersion}"
                }
            }
        }
        stage('Init'){
            steps{
                sh """
                cd terraform
                terraform init -reconfigure
                """
            }
        }
        stage('Plan'){
            steps{
                sh """
                cd terraform
                terraform plan -var="app_version=${params.appVersion}"
                """
            }
        }
        // stage('Plan'){
        //     steps{
        //         sh """
        //         cd terraform
        //         terraform plan -var="app_version=${params.appVersion}"
        //         """
        //     }
        // }

    }
    post { 
        always { 
            echo 'I will always say Hello again!'
            deleteDir()
        }
        success { 
            echo 'I will run when pipeline is success'
        }
        failure { 
            echo 'I will run when pipeline is failed '
        }
    }
}